<!DOCTYPE html>
<html>
<head>
  <meta http-equiv="X-UA-Compatible" content="IE=edge" />
  <title>{{{appName}}}</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
  <meta charset="UTF-8" />
  {{>js_jquery}}
  {{>js_prettify}}
  {{>js_bootstrap}}
  {{>marked}}
  <script>
    $( document ).ready(function() {
      marked.setOptions({
        renderer: new marked.Renderer(),
        gfm: true,
        tables: true,
        breaks: false,
        pedantic: false,
        sanitize: false,
        smartLists: true,
        smartypants: false
      });

      var textFile = null;

      /// Function to be used to download a text json schema
      function makeTextFile(text) {

        var data = new Blob([text], {type: 'text/plain'});

        // If we are replacing a previously generated file we need to
        // manually revoke the object URL to avoid memory leaks.
        if (textFile !== null) {
          window.URL.revokeObjectURL(textFile);
        }

        textFile = window.URL.createObjectURL(data);

        var a = document.createElement("a");
        document.body.appendChild(a);
        a.style = "display: none";
        a.href = textFile;
        a.download = 'schema.txt';
        a.click();

        return textFile;
      };

      /// TODO: Implement resizing for expanding within iframe
      function callResize() {
        window.parent.postMessage('resize', "*");
      }

      function processMarked() {
        $(".marked").each(function() {
          $(this).html(marked($(this).html()));
        });
      }

      // Bootstrap Scrollspy
      $(this).scrollspy({ target: '#scrollingNav', offset: 18 });

      // Content-Scroll on Navigation click.
      $('.sidenav').find('a').on('click', function(e) {
          e.preventDefault();
          var id = $(this).attr('href');
          if ($(id).length > 0)
              $('html,body').animate({ scrollTop: parseInt($(id).offset().top) }, 400);
          window.location.hash = $(this).attr('href');
      });

      // Quickjump on Pageload to hash position.
      if(window.location.hash) {
          var id = window.location.hash;
          if ($(id).length > 0)
              $('html,body').animate({ scrollTop: parseInt($(id).offset().top) }, 0);
      }


      function initDynamic() {
        // tabs
        $('.nav-tabs-examples a').click(function (e) {
            e.preventDefault();
            $(this).tab('show');
        });


        $('.nav-tabs-examples').find('a:first').tab('show');

        // call scrollspy refresh method
        $(window).scrollspy('refresh');
      }

      initDynamic();

      // Pre- / Code-Format
      prettyPrint();

      //Convert elements with "marked" class to markdown
      processMarked();
    });

    function findNode(id, currentNode) {
        var currentChild,
            result;

        if ( Object.keys(currentNode)[0] == id) {
            return currentNode;
        } else {
            // Use a for loop instead of forEach to avoid nested functions
            // Otherwise "return" will not work properly
            for(var propt in currentNode){
                if (currentNode.hasOwnProperty(propt)) {
                    currentChild = currentNode[propt]
                    if (id == propt) {
                        return currentChild;
                    } else {
                        // Search in the current child
                        if (typeof(currentChild) === 'object') {
                            result = findNode(id, currentChild);
                            if (result != false) {
                                return result;
                            }
                        }
                    }
                }
            }
            // The node has not been found and we have no more options
           return false;
        }
    }
  </script>
  <style type="text/css">
    {{>fonts}}

    {{>css_bootstrap}}
    {{>css_prettify}}

    {{>styles}}
  </style>
</head>
<body>
  <script>
    // Script section to load models into a JS Var
    var defs = {}
    {{#models}}
    {{#model}}
    defs["{{name}}"] = {{{modelJson}}};
    {{/model}}
    {{/models}}

    var errs = {};
    {{#swagger.vendorExtensions.x-shared-errors}}
    {
      let err = {{{.}}};
      errs[err.errorID] = err;
    }
    {{/swagger.vendorExtensions.x-shared-errors}}
  </script>

  <div class="container-fluid">
    <div class="row-fluid">
      <div id="sidenav" class="span2">
        <nav id="scrollingNav">
          <ul class="sidenav nav nav-list">
            <!-- Logo Area -->
              <!--<div style="width: 80%; background-color: #4c8eca; color: white; padding: 20px; text-align: center; margin-bottom: 20px; ">

              API Docs 2

              </div>
            -->
            <img src="./relampago.png" class="icon"/>
            <li class="nav-fixed nav-header active" data-group="_"><a href="#top">API Summary</a></li>

            {{#apiInfo}}
              {{#apis}}
                {{#operations}}
                  <li class="nav-category" data-group="{{baseName}}"><a href="#api-{{baseName}}">{{baseName}}</a></li>
                  {{#operation}}
                    <li data-group="{{baseName}}" data-name="{{nickname}}" class="sideItem">
                      <a href="#api-{{baseName}}-{{nickname}}">{{summary}}</a>
                    </li>
                  {{/operation}}
                {{/operations}}
              {{/apis}}
            {{/apiInfo}}
          </ul>
        </nav>
      </div>
      <div id="content">
        <div id="project">
          <div class="pull-left">
            <h1>{{{appName}}}</h1>
          </div>
          <div class="clearfix"></div>
        </div>
        <div id="header">
          <div id="api-_">
            {{#version}}
              <div class="app-desc">Version: {{{.}}}</div>
            {{/version}}
            <section>
                <h1>Overview</h1>
                <div id="app-description" class="app-desc">
                    {{{appDescription}}}
                </div
            </section>
          </div>
        </div>
        <hr/>
        <div id="sections">
          {{#apiInfo}}
            {{#apis}}
              {{#operations}}
                <section id="api-{{baseName}}">
                  <h1>{{baseName}}</h1>
                  {{#operation}}
                    <div id="api-{{baseName}}-{{nickname}}">
                      <article id="api-{{baseName}}-{{nickname}}-0" data-group="User" data-name="{{nickname}}" data-version="0">
                        <div class="pull-left">
                          <h1 class='apiHeader'>{{summary}}</h1>
                        </div>
                        <div class="pull-right"></div>
                        <div class="clearfix"></div>
                        <p></p>
                        <p class="marked">{{notes}}</p>
                        <br/>
                        <h3>Request Format</h3>
                        <span><p class="language-html" data-type="{{httpMethod}}">{{httpMethod}}</p><p class="inlineBlock dullDark">{{path}}</p></span>
                          {{#hasPathParams}}
                            <div class="methodsubtabletitle">Path parameters</div>
                            <table id="methodsubtable">
                                <tr>
                                  <th width="150px">Name</th>
                                  <th>Description</th>
                                </tr>
                                {{#pathParams}}
                                  {{>param}}
                                {{/pathParams}}
                            </table>
                          {{/hasPathParams}}

                          {{#hasHeaderParams}}
                            <div class="methodsubtabletitle">Header parameters</div>
                            <table id="methodsubtable">
                              <tr>
                                <th width="150px">Name</th>
                                <th>Description</th>
                              </tr>
                              {{#headerParams}}
                                  {{>param}}
                              {{/headerParams}}
                            </table>
                          {{/hasHeaderParams}}

                          {{#hasBodyParam}}
                            <h3 style="margin-top:10px;">Body</h3>
                              {{#bodyParams}}
                                {{>paramB}}
                              {{/bodyParams}}
                          {{/hasBodyParam}}

                          {{#hasFormParams}}
                            <div class="methodsubtabletitle">Form parameters</div>
                            <table id="methodsubtable">
                              <tr>
                                <th width="150px">Name</th>
                                <th>Description</th>
                              </tr>
                              {{#formParams}}
                                  {{>param}}
                              {{/formParams}}
                            </table>
                          {{/hasFormParams}}

                          {{#hasQueryParams}}
                            <h3 style="margin-top:10px;">Query Parameters</h3>
                            <table id="methodsubtable">
                              <tr>
                                <th width="150px">Name</th>
                                <th width="150px">Type</th>
                                <th>Description</th>
                              </tr>
                              {{#queryParams}}
                                {{>param}}
                              {{/queryParams}}
                            </table>
                          {{/hasQueryParams}}
                        <br/>
                        <h3 style="margin-bottom: 0px;">Usage</h3>
                        <div class="tab-content" style="border: none; background-color: transparent;" >
                          <div class="tab-pane active" id="examples-{{baseName}}-{{nickname}}-0-curl">
                            <pre class="prettyprint"><code class="language-bsh">{{>sample_curl}}</code></pre>
                          </div>
                        </div>

                          {{#responses}}
                            <h3>Response</h3>
                            <p id="examples-{{baseName}}-{{nickname}}-description-{{code}}" class="marked"></p>
                            <script>
                              var response{{baseName}}{{code}}_description = `{{{message}}}`;
                              var response{{baseName}}{{code}}_description_break = response{{baseName}}{{code}}_description.indexOf('\n');
                              if (response{{baseName}}{{code}}_description_break == -1) {
                                $("#examples-{{baseName}}-{{nickname}}-title-{{code}}").text("Status: {{code}} - " + response{{baseName}}{{code}}_description);
                              } else {
                                $("#examples-{{baseName}}-{{nickname}}-title-{{code}}").text("Status: {{code}} - " + response{{baseName}}{{code}}_description.substring(0, response{{baseName}}{{code}}_description_break));
                                $("#examples-{{baseName}}-{{nickname}}-description-{{code}}").html(response{{baseName}}{{code}}_description.substring(response{{baseName}}{{code}}_description_break));
                              }
                            </script>
                            <div class="tab-content" id="responses-{{baseName}}-{{nickname}}-{{code}}-wrapper" style='margin-bottom: 10px;'>
                              {{#schema}}
                                <div class="tab-pane active" id="responses-{{baseName}}-{{nickname}}-{{code}}-schema">
                                  <div id="responses-{{baseName}}-{{nickname}}-schema-{{code}}" class="exampleStyle">
                                    <script>
                                      $(document).ready(function() {
                                        var schemaWrapper = {{{jsonSchema}}};
                                        var schema = findNode('schema',schemaWrapper).schema;
                                        if (!schema) {
                                          schema = schemaWrapper.schema;
                                        }
                                        
                                        if (schema.$ref != null) {
                                          schema = defsParser.$refs.get(schema.$ref);
                                        } else if (schema.items != null && schema.items.$ref != null) {
                                            schema.items = defsParser.$refs.get(schema.items.$ref);
                                        } else {
                                          schemaWrapper.definitions = Object.assign({}, defs);
                                          $RefParser.dereference(schemaWrapper).catch(function(err) {
                                            console.log(err);
                                          });
                                        }

                                        //removes 'desc' attribute when passing to response so we don't get double descriptions
                                        var modifiedSchema = structuredClone(schema);
                                        modifiedSchema['description']=null;
                                        //console.log('MODIFIED SCHEMA'+JSON.stringify(modifiedSchema));
                                        modifiedSchema['desc']=null;
                                        var view = new JSONSchemaView(modifiedSchema, 3);
                                        $('#responses-{{baseName}}-{{nickname}}-{{code}}-schema-data').val(JSON.stringify(modifiedSchema));
                                        //console.log("DESC "+schema['description']);
                                        var result = $('#responses-{{baseName}}-{{nickname}}-schema-{{code}}');
                                        result.empty();
                                        let p=document.createElement("p");
                                        p.append(schema.description);
                                        console.log(schema);
                                        result.append(p)
                                        result.append(view.render());
                    
                                      });
                                    </script>
                                  </div>
                                  <input id='responses-{{baseName}}-{{nickname}}-{{code}}-schema-data' type='hidden' value=''></input>
                                </div>
                                {{#examples}}
                                  <div class="tab-pane" id="examples-{{baseName}}-{{nickname}}-{{code}}-example">
                                    <pre class="prettyprint"><code class="json">{{example}}</code></pre>
                                  </div>
                                {{/examples}}
                              {{/schema}}
                              {{#hasHeaders}}
                                  <div class="tab-pane" id="responses-{{nickname}}-{{code}}-headers">
                                      <table>
                                          <tr>
                                              <th width="150px">Name</th>
                                              <th width="100px">Type</th>
                                              <th width="100px">Format</th>
                                              <th>Description</th>
                                          </tr>
                                          {{#headers}}
                                              <tr>
                                                  <td>{{name}}</td>
                                                  <td>{{#datatype}}{{dataType}}{{/datatype}}</td>
                                                  <td>{{dataFormat}}</td>
                                                  <td>{{description}}</td>
                                              </tr>
                                          {{/headers}}
                                      </table>
                                  </div>
                              {{/hasHeaders}}
                            </div>
                          {{/responses}}
                        </article>
                      </div>
                      <hr>
                    {{/operation}}
                  </section>
                {{/operations}}
              {{/apis}}
            {{/apiInfo}}
          </div>
          <div id="footer">
            <div id="api-_footer">
            </div>
          </div>
{{^hideGenerationTimestamp}}          <div id="generator">
            <div class="content">
              Generated {{generatedDate}}
            </div>
          </div>
{{/hideGenerationTimestamp}}      </div>
    </div>
  </div>
  {{>js_jsonformatter}}
  {{>js_jsonschemaview}}
  {{>js_json_schema_ref_parser}}
  {{>js_json_stringify_safe}}
  {{>js_webfontloader}}
  <script>
    var schemaWrapper = { "components": { "schemas" : defs}};
    defsParser = new $RefParser();
    defsParser.dereference(schemaWrapper).catch(function(err) {
      console.log(err);
    });
  </script>
  <script>
  $(document).ready(function () {
    $('.nav-tabs-examples').find('a:first').tab('show');
    $(this).scrollspy({ target: '#scrollingNav', offset: 18 });
  });
  </script>
</body>
</html>
